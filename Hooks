import React, { Component } from 'react'
import {
  StyleSheet,
    View,
    Image,
    Text,
    Dimensions,
    Alert,
    Button
} from 'react-native'

import SortableGrid from 'react-native-sortable-grid'
const { height,width }=Dimensions.get('window')
export default class App extends Component {

    constructor(props) {
        super(props);
        this.state = {
            imageurls: [
                { id: '0', image: 'http://192.168.0.10:5000/getimg?id=1_01_01.png' },
                { id: '1', image: 'http://192.168.0.10:5000/getimg?id=1_01_02.png' },
                { id: '2', image: 'http://192.168.0.10:5000/getimg?id=1_01_03.png' },
                { id: '3', image: 'http://192.168.0.10:5000/getimg?id=1_02_01.png' },
                { id: '4', image: 'http://192.168.0.10:5000/getimg?id=1_02_02.png' },
                { id: '5', image: 'http://192.168.0.10:5000/getimg?id=1_02_03.png' },
                { id: '6', image: 'http://192.168.0.10:5000/getimg?id=1_03_01.png' },
                { id: '7', image: 'http://192.168.0.10:5000/getimg?id=1_03_02.png' },
                { id: '8', image: 'http://192.168.0.10:5000/getimg?id=1_03_03.png' },
            ],
            loading:true
        };
        this.imagejson = [];
        this.isSolved = this.isSolved.bind(this);
        this.fetching = this.fetching.bind(this);
        this.shufflingArray = this.shufflingArray.bind(this);
    }
    
 
    
    async fetching() {
        console.log(this.state.imageurls);
         const url = "http://192.168.0.10:5000/getimg?id=";
        let images = this.state.imageurls.slice();
        console.log('fetching.....');
        await fetch("http://192.168.0.10:5000/tic")
            .then(response =>  response.json())
            .then(res => {
                this.imagejson = res;
                for (let i = 0; i < this.imagejson.length; i++) {
             images[i]['image'] = url + this.imagejson[i];
             images[i]['id'] = i; 
                }
                //images = ;
                console.log("images before setstate");
                //console.log(images);
        this.setState({
            imageurls: images,
            loading:true
        }, () => { console.log("After Set state");console.log(this.state.imageurls);});
            })
            .catch(err => console.log(err));
    }
    
    shufflingArray(images) {
        console.log("images");
        console.log(images);
        let randindex = 2;
        let tmp = {}
        for (var i = images.length - 1; i > 0; i--) {
        randindex = Math.floor(Math.random() * (i + 1));
         tmp = images[i];
        images[i] = images[randindex];
        images[randindex] = tmp;
        }
        console.log("shuffled images");
        console.log(images);
        return images;   
    }
    
    
isSolved(itemOrderArray) {
        let bo = true;
        itemOrderArray.forEach(function (item) {
            if (!((item["key"]) == item["order"]))
            {
               bo = false;
            }
            
        });
        return bo;
}

isWinner(itemOrderArray) {
        if (this.isSolved(itemOrderArray)) {
            Alert.alert( 'Congratulations!!',
                'Continue to the next puzzle?',
                [
                    { text: 'Yes', onPress: () => this.fetching() },
                    { text: 'No', onPress: () => console.log('No Pressed'), style: 'cancel' },],
                { cancelable: false });
        }
    }
    
    
    render() {
        return (
            <>
          <SortableGrid
              blockTransitionDuration={50}
              activeBlockCenteringDuration={200}
              itemsPerRow={3}
              dragActivationTreshold={50}
              onDragRelease={(itemOrder) => { console.log("Drag was released, the blocks are in the following order: ",itemOrder);this.isWinner(itemOrder['itemOrder']); }}
              onDragStart={() => console.log("Some block is being dragged now!")}       
                >
                    {
                        (this.shufflingArray(this.state.imageurls)).map((item) =>
                      <View key={item.id}  onTap={() => console.log(item.id) }>
                          <Image
                              style={{height:138,width:width/3}}
                              source={{ uri:item.image }} />
       </View>

     )
   }

                </SortableGrid>
            </>
    )
    };

}

const styles = StyleSheet.create({
    container: {
    flex: 1,
    backgroundColor: '#ffffff',
    alignItems: 'center',
        justifyContent: 'center',
    }
});
